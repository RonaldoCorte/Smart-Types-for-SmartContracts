 
var Msg_value : int 
array Balances[proc] : int 
array GlobalBalances[proc] : int 
var Return_get_balance : int 
array Random_amount[proc] : int 
var BalancesArrayArithmeticOperation0_transfer : int 
var BalancesArrayArithmeticOperation1_transfer : int 
array Random_W_amount[proc] : int 
var BalancesArrayArithmeticOperation0_withdraw : int 
var Revert : bool 
init (param_init) {  Balances[param_init]  >= 0} 
unsafe (param_unsafe) { not(  Balances[param_unsafe]  >= 0)} 
 
transition deposit(sender) 
requires{ true } 
{
 Balances[sender] :=   Balances[sender]  + Msg_value
}
 
transition get_balance(sender) 
requires{ true } 
{
 Return_get_balance :=  Balances[sender] 
}
 
transition transfer(sender to) 
requires{ true } 
{
   BalancesArrayArithmeticOperation0_transfer :=  Random_amount[sender] ;
  BalancesArrayArithmeticOperation1_transfer :=  Random_amount[sender] ;
 Balances[c] := case
|   Balances[sender]  >=  Random_amount[sender]  && c = sender:   Balances[sender]  - BalancesArrayArithmeticOperation0_transfer
|   Balances[sender]  >=  Random_amount[sender]  && c = to:   Balances[to]  + BalancesArrayArithmeticOperation1_transfer
}
 
transition withdraw(sender) 
requires{ true } 
{
   BalancesArrayArithmeticOperation0_withdraw :=  Random_W_amount[sender] ;
 Balances[c] := case
|   Balances[sender]  >=  Random_W_amount[sender]  && c = sender:   Balances[sender]  - BalancesArrayArithmeticOperation0_withdraw
}
