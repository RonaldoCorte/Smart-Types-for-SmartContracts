type state = ItemAvailable | OfferPlaced | Accept 
var CurrentState : state
var InstanceOwner : proc 
var Description : proc 
var AskingPrice : int 
var InstanceBuyer : proc 
var OfferPrice : int 
array GlobalBalances[proc] : int 
array Random_param_offer[proc] : int 
array Random_param_offer_r[proc] : int 
array Random_param_offer_a[proc] : int 
var Revert : bool 
init () {  CurrentState = ItemAvailable &&  AskingPrice > 0 && OfferPrice > AskingPrice} 
unsafe () { not( OfferPrice > AskingPrice)} 
 
transition make_offer(sender) 
requires{  ItemAvailable = CurrentState &&  Random_param_offer[sender]  > AskingPrice} 
{
      InstanceBuyer := sender;
  OfferPrice :=  Random_param_offer[sender] ;
 CurrentState := OfferPlaced;
Revert := case
| sender = InstanceOwner:  True
|  Random_param_offer[sender]  = 0:  True
}
 
transition reject(sender) 
requires{  OfferPlaced = CurrentState && not(  Random_param_offer[sender]  = 0)} 
{
  InstanceBuyer := sender;
  CurrentState := ItemAvailable
}
 
transition accept(sender) 
requires{  OfferPlaced = CurrentState && not( sender = InstanceOwner)} 
{
    CurrentState := Accept;
Revert := case
|  Random_param_offer[sender]  = 0:  True
}
