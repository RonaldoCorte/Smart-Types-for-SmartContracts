type state = Created | InTransit | OutOfCompliance | Completed 
var Owner : proc 
var CurrentState : state
var CounterParty : proc 
var Device : proc 
var ComplianceStatus : bool 
var Max_Temperature : int 
var Min_Temperature : int 
array GlobalBalances[proc] : int 
array Random_param_temp[proc] : int 
var Revert : bool 
init () {  Max_Temperature > Min_Temperature &&  Min_Temperature > 0 &&  ComplianceStatus =  True && CurrentState = Created} 
unsafe () { not( Max_Temperature > Min_Temperature)} 
 
transition ingest_telemetry(sender) 
requires{  sender = Device &&  CurrentState = Created || CurrentState = InTransit} 
{
  ComplianceStatus := case
|   Random_param_temp[sender]  > Max_Temperature ||  Random_param_temp[sender]  < Min_Temperature:  False
|   Random_param_temp[sender]  > Max_Temperature ||  Random_param_temp[sender]  < Min_Temperature:  False
| not(   Random_param_temp[sender]  > Max_Temperature ||  Random_param_temp[sender]  < Min_Temperature):  True;
Revert := case
| not( sender = Device):  True
}
 
transition transfer_responsability(sender param_new_counter_party) 
requires{  sender = CounterParty &&  CurrentState = Created || CurrentState = InTransit} 
{
      CounterParty := param_new_counter_party;
 Revert := case
| param_new_counter_party = Device:  True
|  not( sender = param_new_counter_party) && not( sender = CounterParty):  True;
CurrentState := case
| CurrentState = Created: InTransit
| not( CurrentState = Created): Created
}
 
transition complete(sender) 
requires{ sender = Owner} 
{
  CurrentState := Completed
}
